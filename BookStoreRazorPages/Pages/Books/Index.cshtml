@page
@model BookStoreRazorPages.Pages.Books.IndexModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
    ViewData["Title"] = "Book";
    var requestToken = Antiforgery.GetAndStoreTokens(HttpContext).RequestToken;
}
<input id="RequestVerificationToken" type="hidden" value="@requestToken" />

<html>
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>
<body>
    <div class="container mt-4">
        <button type="button" class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#createModal">New Book</button>
        <table class="table table-success table-striped">
            <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Description</th>
                    <th scope="col">Category</th>
                    <th scope="col">Price</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody id="bookTable">
                @foreach (var book in Model.Book)
                {
                    <tr data-id="@book.Id">
                        <td class="book-name">@book.Name</td>
                        <td class="book-description">@book.Description</td>
                        <td class="book-category">@book.Category</td>
                        <td class="book-price">@book.Price</td>
                        <td>
                            <button class="btn btn-sm btn-warning btn-edit" data-bs-toggle="modal" data-bs-target="#editModal">Edit</button>
                            <button class="btn btn-sm btn-danger btn-delete">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
</body>
</html>


<!-- Add Book Modal -->
<div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="createModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createModalLabel">Create New Book</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Modal Form -->
                <form id="bookForm" method="post">
                    <div class="mb-3">
                        <label for="bookName" class="form-label">Book Name</label>
                        <input type="text" class="form-control" id="bookName" asp-for="VM.Name" required>
                    </div>
                    <div class="mb-3">
                        <label for="bookDescription" class="form-label">Book Description</label>
                        <textarea class="form-control" id="bookDescription" asp-for="VM.Description" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="bookCategory" class="form-label">Book Category</label>
                        <input type="text" class="form-control" id="bookCategory" asp-for="VM.Category" required>
                    </div>
                    <div class="mb-3">
                        <label for="bookPrice" class="form-label">Book Price</label>
                        <input type="number" class="form-control" id="bookPrice" asp-for="VM.Price" required>
                    </div>
                    <button type="submit" id="saveButton" class="btn btn-primary">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>
  
<!-- Edit Book Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Book</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editBookForm">
                    <input type="hidden" id="editBookId">
                    <div class="mb-3">
                        <label for="editBookName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="editBookName" required>
                    </div>
                    <div class="mb-3">
                        <label for="editBookDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="editBookDescription" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="editBookCategory" class="form-label">Category</label>
                        <input type="text" class="form-control" id="editBookCategory" required>
                    </div>
                    <div class="mb-3">
                        <label for="editBookPrice" class="form-label">Price</label>
                        <input type="number" class="form-control" id="editBookPrice" step="0.01" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
        $(document).ready(function () {
        // Add New Book
        $('#bookForm').on('submit', function (event) {
            event.preventDefault(); // Prevent default form submission

            var formData = $(this).serialize();

            $.ajax({
                url: '@Url.Page("Index")',
                type: 'POST',
                data: formData,
                success: function (response) {
                    if (response.success) {
                        alert(response.message || "Book created successfully!");
                        $('#createModal').modal('hide'); // Hide the modal
                        $('.modal-backdrop').remove(); // Remove black opacity blur

                        // Create the new row
                        if (response.data) {
                            var newRow = $('<tr data-id="' + response.data.id + '">');
                            newRow.append('<td class="book-name">' + response.data.name + '</td>');
                            newRow.append('<td class="book-description">' + response.data.description + '</td>');
                            newRow.append('<td class="book-category">' + response.data.category + '</td>');
                            newRow.append('<td class="book-price">' + response.data.price + '</td>');
                            newRow.append('<td>' +
                                '<button class="btn btn-sm btn-warning btn-edit" data-bs-toggle="modal" data-bs-target="#editModal">Edit</button>' +
                                '<button class="btn btn-sm btn-danger btn-delete">Delete</button>' +
                                '</td>');
                            $('#bookTable').append(newRow);
                        }
                        $('#bookForm')[0].reset();
                    } else {
                        alert(response.message || "An error occurred while creating the book.");
                    }
                },
                error: function (xhr) {
                    alert("An error occurred: " + xhr.responseText);
                }
            });
        });

        // Load data into the Edit Modal
        $('#bookTable').on('click', '.btn-edit', function () {
            const row = $(this).closest('tr');
            const id = row.data('id');
            $('#editBookId').val(id); // Hidden field to store book ID
            $('#editBookName').val(row.find('.book-name').text().trim());
            $('#editBookDescription').val(row.find('.book-description').text().trim());
            $('#editBookCategory').val(row.find('.book-category').text().trim());
            $('#editBookPrice').val(row.find('.book-price').text().trim());
        });

        // Submit the Edit Modal Form
        $('#editBookForm').on('submit', function (event) {
            event.preventDefault();
            const bookId = $('#editBookId').val();
            const updatedBook = {
                Name: $('#editBookName').val(),
                Description: $('#editBookDescription').val(),
                Category: $('#editBookCategory').val(),
                Price: parseFloat($('#editBookPrice').val())
            };
            debugger;
            var formData = $(this).serialize();
            $.ajax({
                url: '?handler=Edit&id=' + bookId,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(updatedBook),
                headers: {
                    RequestVerificationToken:
                        document.getElementById("RequestVerificationToken").value
                },
                success: function (response) {
                    if (response.success) {
                        alert(response.message || "Book updated successfully!");
                        $('#editModal').modal('hide');
                        $('.modal-backdrop').remove(); // Remove black opacity blur

                        // Update the row
                        const row = $('#bookTable').find('tr[data-id="' + bookId + '"]');
                        row.find('.book-name').text(updatedBook.Name);
                        row.find('.book-description').text(updatedBook.Description);
                        row.find('.book-category').text(updatedBook.Category);
                        row.find('.book-price').text(updatedBook.Price);
                    } else {
                        alert(response.message || "Failed to update the book.");
                    }
                },
                error: function (xhr) {
                    alert("Error: " + xhr.responseText);
                }
            });
        });

        // Handle Delete
        $('#bookTable').on('click', '.btn-delete', function () {
            const row = $(this).closest('tr');
            const bookId = row.data('id');
            if (confirm("Are you sure you want to delete this book?")) {
                $.ajax({
                    url: '?handler=Delete&id=' + bookId,
                    type: 'POST',
                    headers: {
                        RequestVerificationToken:
                            document.getElementById("RequestVerificationToken").value
                    },
                    success: function (response) {
                        if (response.success) {
                            alert(response.message || "Book deleted successfully!");
                            row.remove();
                        } else {
                            alert(response.message || "Failed to delete the book.");
                        }
                    },
                    error: function (xhr) {
                        alert("Error: " + xhr.responseText);
                    }
                });
            }
        });
    });
</script>


@* <script>
    //Add New Book
    $(document).ready(function () {
         $('#bookForm').on('submit', function (event) {
            event.preventDefault(); // Prevent default form submission

            var formData = $(this).serialize();

            $.ajax({
                url: '@Url.Page("Index")',
                type: 'POST',
                data: formData,
                success: function (response) {
                    if (response.success) {
                        alert(response.message || "Book created successfully!");
                        $('#createModal').modal('hide'); // Hide the modal
                        $('.modal-backdrop').remove(); // remove black opacity blur
                        
                        // Create the new row
                        if (response.data) {
                            var newRow = $('<tr>');
                            newRow.append('<th scope="row">' + response.data.name + '</th>');
                            newRow.append('<td>' + response.data.description + '</td>');
                            newRow.append('<td>' + response.data.category + '</td>');
                            newRow.append('<td>' + response.data.price + '</td>');
                            newRow.append('<td>' + '<button class="btn btn-sm btn-warning btn-edit" data-bs-toggle="modal" data-bs-target="#editModal">Edit</button>'  
                                                 + '<button class="btn btn-sm btn-danger btn-delete">Delete</button>'
                                                 + '</td>');
                            // Append the new row to the table body
                            $('table tbody').append(newRow);
                        }
                        $('#bookForm')[0].reset();
                    } 
                    else {
                        alert(response.message || "An error occurred while creating the book.");
                    }
                },
                error: function (xhr) {
                    alert("An error occurred: " + xhr.responseText);
                }
            });
        });
    });



    //Edit book
    $(document).ready(function () {
        // Load data into the edit modal
        $('#bookTable').on('click', '.btn-edit', function () {
            const row = $(this).closest('tr');
            const id = row.data('id');
            $('#editBookId').val(id);
            $('#editBookName').val(row.find('.book-name').text());
            $('#editBookDescription').val(row.find('.book-description').text());
            $('#editBookCategory').val(row.find('.book-category').text());
            $('#editBookPrice').val(row.find('.book-price').text());
        });

        // Submit the edit form
        $('#editBookForm').on('submit', function (event) {
            event.preventDefault();
            const bookId = $('#editBookId').val();
            const updatedBook = {
                Name: $('#editBookName').val(),
                Description: $('#editBookDescription').val(),
                Category: $('#editBookCategory').val(),
                Price: parseFloat($('#editBookPrice').val())
            };

            $.ajax({
                url: '/Books/Index?handler=Edit&id=' + bookId,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(updatedBook),
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        location.reload();
                    } else {
                        alert(response.message);
                    }
                },
                error: function (xhr) {
                    alert("Error: " + xhr.responseText);
                }
            });
        });

            // Handle delete
            $('#bookTable').on('click', '.btn-delete', function () {
                const row = $(this).closest('tr');
                const bookId = row.data('id');
                if (confirm("Are you sure you want to delete this book?")) {
                    $.ajax({
                        url: '/Books/Index?handler=Delete&id=' + bookId,
                        type: 'POST',
                        success: function (response) {
                            if (response.success) {
                                alert(response.message);
                                row.remove();
                            } else {
                                alert(response.message);
                            }
                        },
                        error: function (xhr) {
                            alert("Error: " + xhr.responseText);
                        }
                    });
                }
            });
        });

</script> *@