@page
@model BookStoreRazorPages.Pages.Books.IndexModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
    ViewData["Title"] = "Book";
    var requestToken = Antiforgery.GetAndStoreTokens(HttpContext).RequestToken;
}
<input id="RequestVerificationToken" type="hidden" value="@requestToken" />

<html>
<head>
    <link href="~/css/bookindex.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>
@* <!-- #region name -->
<section class="wrapper">
    <div class="container">
        <div class="row">
            <div class="col text-center mb-5">
                <h1 class="display-4 font-weight-bolder">Bootstrap 4 Cards With Background Image</h1>
                <p class="lead">Lorem ipsum dolor sit amet at enim hac integer volutpat maecenas pulvinar. </p>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 col-md-6 col-lg-4 mb-4">

                <div class="card text-dark card-has-bg click-col" style="background-image:url('https://api.unsplash.com/search/collections?page=1&query=office');">
                    <img class="card-img d-none" src="https://source.unsplash.com/600x900/?tech,street" alt="Creative Manner Design Lorem Ipsum Sit Amet Consectetur dipisi?">
                    <div class="card-img-overlay d-flex flex-column">
                        <div class="card-body">
                            <small class="card-meta mb-2">Thought Leadership</small>
                            <h4 class="card-title mt-0 "><a class="text-dark" herf="https://creativemanner.com">Web Developmet Lorem Ipsum Sit Amet Consectetur dipisi?</a></h4>
                            <small><i class="far fa-clock"></i> October 15, 2020</small>
                        </div>
                        <div class="card-footer">
                            <div class="media">
                                <img class="mr-3 rounded-circle" src="https://assets.codepen.io/460692/internal/avatars/users/default.png?format=auto&version=1688931977&width=80&height=80" alt="Generic placeholder image" style="max-width:50px">
                                <div class="media-body">
                                    <h6 class="my-0 text-dark d-block">Oz Coruhlu</h6>
                                    <small>Director of UI/UX</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- #endregion --> *@
<body class="pb-5">
    <div class="container mt-4">
        <button id="addNewBookBtn" type="button" class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#createModal" >New Book</button>
        <table class="table table-success table-striped">
            <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Description</th>
                    <th scope="col">Category</th>
                    <th scope="col">Price</th>
                    <th scope="col">Authors</th>
                    <th scope="col">Cover Photo</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody id="bookTable">
                @foreach (var book in Model.Book)
                {
                    <tr data-id="@book.Id">
                        <td class="book-name">@book.Name</td>
                        <td class="book-description">@book.Description</td>
                        <td class="book-category">@book.Category</td>
                        <td class="book-price">@book.Price</td>
                        <td class="book-authors">@string.Join(", ", book.Authors.Select(a => a.Name))</td>
                        <td class="book-Photos">
                        @foreach (var photo in book.Photos){
                                <img class="mr-3 rounded-circle" src="@photo.Path" alt="Generic placeholder image" style="max-width:50px">
                        }
                        </td>
                        <td>
                            <button class="btn btn-sm btn-warning btn-edit" data-bs-toggle="modal" data-bs-target="#editModal">Edit</button>
                            <button class="btn btn-sm btn-danger btn-delete">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
</body>
</html>


<!-- Add Book Modal -->
<div class="modal fade" id="createModal" tabindex="-1" role="dialog" >
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createModalLabel">Create New Book</h5>
                <button id="closeCreateModalBtn" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Modal Form -->
                <form id="bookForm" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="bookName" class="form-label">Book Name</label>
                        <input type="text" class="form-control" id="bookName" asp-for="VM.Name" required>
                    </div>
                    <div class="mb-3">
                        <label for="bookDescription" class="form-label">Book Description</label>
                        <textarea class="form-control" id="bookDescription" asp-for="VM.Description" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="bookCategory" class="form-label">Book Category</label>
                        <input type="text" class="form-control" id="bookCategory" asp-for="VM.Category" required>
                    </div>
                    <div class="mb-3">
                        <label for="bookPrice" class="form-label">Book Price</label>
                        <input type="number" class="form-control" id="bookPrice" asp-for="VM.Price" required>
                    </div>
                    <div class="form-group">
                        <label for="authorSelect">Author</label>
                        <select class="form-control" id="authorSelect" asp-for="VM.Authors" multiple required>
                            <option value="">-- Select an Author --</option>
                            @if (Model.Author != null && Model.Author.Count > 0)
                            {
                                @foreach (var author in Model.Author)
                                {
                                    <option value="@author.Id">@author.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <dl>
                            <dt>
                                <label for="bookFiles"></label>
                            </dt>
                            <dd>
                                <input id="bookFiles" asp-for="VM.FormFiles" type="file" multiple />
                            </dd>
                        </dl>
                    </div>
                    <button type="submit" id="saveButton" class="btn btn-primary">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>
  
<!-- Edit Book Modal -->
<div class="modal fade" id="editModal" >
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Book</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" ></button>
            </div>
            <div class="modal-body">
                <form id="editBookForm" method="post">
                    <input type="hidden" id="editBookId">
                    <div class="mb-3">
                        <label for="editBookName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="editBookName" asp-for="VM.Name" required>
                    </div>
                    <div class="mb-3">
                        <label for="editBookDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="editBookDescription" rows="3" asp-for="VM.Description"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="editBookCategory" class="form-label">Category</label>
                        <input type="text" class="form-control" id="editBookCategory" asp-for="VM.Category" required>
                    </div>
                    <div class="mb-3">
                        <label for="editBookPrice" class="form-label">Price</label>
                        <input type="number" class="form-control" id="editBookPrice" step="0.1" asp-for="VM.Price" required>
                    </div>
                    <div class="form-group">
                        <label for="editBookAuthors">Author</label>
                        <select class="form-control" id="editBookAuthors" asp-for="VM.Authors" multiple required>
                            <option value="">-- Select an Author --</option>
                            @if (Model.Author != null && Model.Author.Count > 0)
                            {
                                @foreach (var author in Model.Author)
                                {
                                    <option value="@author.Id">@author.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <dl>
                            <dt>
                                <label for="editBookFiles"></label>
                            </dt>
                            <dd>
                                <input id="editBookFiles" asp-for="editPhotoVM.NewPhotos" type="file" multiple />
                            </dd>
                        </dl>
                    </div>
                    <div id="currentBookPhotos">
     
                    </div>
                    <button type="submit" id="EditSaveBtn" class="btn btn-primary">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>

    $(document).ready(function () {

        // Remove focus from the button on closing the Modal
        $('#closeCreateModalBtn').on('click', function () {
            const addNewBookBtn = document.getElementById('addNewBookBtn');
            setTimeout(() => {
                if (document.activeElement === addNewBookBtn) {
                    addNewBookBtn.blur();
                }
                document.body.click();
                }, 20);
        });

        // Add New Book
        $('#bookForm').on('submit', function (event) {
            event.preventDefault(); 

            const formData = new FormData(this);
            const photoContainer = document.querySelector('.book-Photos'); 
            const files = document.querySelector('#bookFiles').files;
            photoContainer.innerHTML = '';
            const photosHTML = Array.from(files).map(file => {
                    // Generate a preview URL for the file
                    const previewURL = URL.createObjectURL(file);
                    return `<img class="mr-3 rounded-circle" src="${previewURL}" alt="${file.name}" style="max-width:50px" >`;
                }).join('');


            $.ajax({
                url: '@Url.Page("Index")',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                headers: {
                    RequestVerificationToken: $('#RequestVerificationToken').val() 
                },
            success: function (response) {
                $('#closeCreateModalBtn').click();
                // Option 1: Use .blur() directly
                //document.getElementById('addNewBookBtn').blur();

                // // Option 2: Focus another element
                //document.body.focus(); // Or focus another element

                // // Option 3: Use setTimeout for delayed blur
                setTimeout(() => {
                    document.getElementById('addNewBookBtn').blur();
                }, 10);

                // // Option 4: Check if the button is focused before blurring
                if (document.activeElement === document.getElementById('addNewBookBtn')) {
                    document.getElementById('addNewBookBtn').blur();
                }

                // // Option 5: Using jQuery
                //$('#addNewBookBtn').blur();

                // // Option 6: Simulate a click on the body to remove focus
                // document.body.click();

                // // Option 7: Use tabindex="-1"
                //document.getElementById('addNewBookBtn').setAttribute('tabindex', '-1');

                    if (response.success) {
                        alert(response.message || "Book created successfully!");
                        $('.modal-backdrop').remove();
                        $('#createModal').modal('hide');
                        console.log(response);
                        if (response.data) {
                            const book = response.data;
                            const authorsNames = Array.isArray(book.authors)
                                ? book.authors.map(author => author.name || '').join(', ')
                                : 'No authors';

                            const bookRow = `
                                <tr data-id="${book.id}">
                                    <td class="book-name">${book.name}</td>
                                    <td class="book-description">${book.description}</td>
                                    <td class="book-category">${book.category}</td>
                                    <td class="book-price">${book.price}</td>
                                    <td class="book-authors">${authorsNames}</td>
                                    <td class="book-Photos">
                                        ${photosHTML}
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-warning btn-edit" data-bs-toggle="modal" data-bs-target="#editModal">Edit</button>
                                        <button class="btn btn-sm btn-danger btn-delete">Delete</button>
                                    </td>
                                </tr>`;
                            $('#bookTable').append(bookRow);
                        }
                        $('#createModal').modal('hide');
                    } else {
                        alert(response.message || "An error occurred while creating the book.");
                    }
                },
                error: function (xhr) {
                    alert("An error occurred: " + xhr.responseText);
                }
            });
        });






        // Load data into the Edit Modal
        $('#bookTable').on('click', '.btn-edit', function () {
            const row = $(this).closest('tr');
            const id = row.data('id');

            $('#editBookId').val(id);
            $('#editBookName').val(row.find('.book-name').text().trim());
            $('#editBookDescription').val(row.find('.book-description').text().trim());
            $('#editBookCategory').val(row.find('.book-category').text().trim());
            $('#editBookPrice').val(row.find('.book-price').text().trim());

            const authorsText = row.find('.book-authors').text().trim();
            const authorNames = authorsText.split(',').map(name => name.trim());
            $('#editBookAuthors option').prop('selected', false);
            $('#editBookAuthors option').each(function () {
                if (authorNames.includes($(this).text().trim())) {
                    $(this).prop('selected', true);
                }
            });

            const photosContainer = $('#currentBookPhotos');
            photosContainer.empty();
            const photos = row.find('.book-Photos img').clone();
            photosContainer.append(photos);

            $('#editBookAuthors').trigger('change');
        });

        // Submit the Edit Modal Form
        $('#editBookForm').on('submit', function (event) {
            event.preventDefault();

            const bookId = $('#editBookId').val();
            const formData = new FormData(this);

            $.ajax({
                url: '?handler=Edit&id=' + bookId,
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                headers: {
                    RequestVerificationToken: $('#RequestVerificationToken').val()
                },
                success: function (response) {
                    if (response.success) {
                        alert(response.message || "Book updated successfully!");
                        $('#editModal').modal('hide');
                        $('.modal-backdrop').remove();

                        if (response.data) {
                            const book = response.data;
                            const authorsNames = Array.isArray(book.authors)
                                ? book.authors.map(author => author.name || '').join(', ')
                                : 'No authors';

                            const row = $(`tr[data-id="${bookId}"]`);
                            row.find('.book-name').text(book.name);
                            row.find('.book-description').text(book.description);
                            row.find('.book-category').text(book.category);
                            row.find('.book-price').text(book.price);
                            row.find('.book-authors').text(authorsNames);
                        }
                    } else {
                        alert(response.message || "Failed to update the book.");
                    }
                },
                error: function (xhr) {
                    alert("Error: " + xhr.responseText);
                }
            });
        });

        // Handle Delete
        $('#bookTable').on('click', '.btn-delete', function () {
            const row = $(this).closest('tr');
            const bookId = row.data('id');

            if (confirm("Are you sure you want to delete this book?")) {
                $.ajax({
                    url: '?handler=Delete&id=' + bookId,
                    type: 'POST',
                    headers: {
                        RequestVerificationToken: $('#RequestVerificationToken').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            alert(response.message || "Book deleted successfully!");
                            row.remove();
                        } else {
                            alert(response.message || "Failed to delete the book.");
                        }
                    },
                    error: function (xhr) {
                        alert("Error: " + xhr.responseText);
                    }
                });
            }
        });
    });
</script>

