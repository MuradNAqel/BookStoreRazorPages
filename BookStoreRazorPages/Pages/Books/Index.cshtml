@page
@model BookStoreRazorPages.Pages.Books.IndexModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
    ViewData["Title"] = "Book";
    var requestToken = Antiforgery.GetAndStoreTokens(HttpContext).RequestToken;
}
<input id="RequestVerificationToken" type="hidden" value="@requestToken" />

<html>
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>
<body class="pb-5">
    <div class="container mt-4">
        <button type="button" class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#createModal">New Book</button>
        <table class="table table-success table-striped">
            <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Description</th>
                    <th scope="col">Category</th>
                    <th scope="col">Price</th>
                    <th scope="col">Authors</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody id="bookTable">
                @foreach (var book in Model.Book)
                {
                    <tr data-id="@book.Id">
                        <td class="book-name">@book.Name</td>
                        <td class="book-description">@book.Description</td>
                        <td class="book-category">@book.Category</td>
                        <td class="book-price">@book.Price</td>
                        <td class="book-authors">@string.Join(", ", book.Authors.Select(a => a.Name))</td>
                        <td>
                            <button class="btn btn-sm btn-warning btn-edit" data-bs-toggle="modal" data-bs-target="#editModal">Edit</button>
                            <button class="btn btn-sm btn-danger btn-delete">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
</body>
</html>


<!-- Add Book Modal -->
<div class="modal fade" id="createModal" tabindex="-1" role="dialog" aria-labelledby="createModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createModalLabel">Create New Book</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Modal Form -->
                <form id="bookForm" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="bookName" class="form-label">Book Name</label>
                        <input type="text" class="form-control" id="bookName" asp-for="VM.Name" required>
                    </div>
                    <div class="mb-3">
                        <label for="bookDescription" class="form-label">Book Description</label>
                        <textarea class="form-control" id="bookDescription" asp-for="VM.Description" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="bookCategory" class="form-label">Book Category</label>
                        <input type="text" class="form-control" id="bookCategory" asp-for="VM.Category" required>
                    </div>
                    <div class="mb-3">
                        <label for="bookPrice" class="form-label">Book Price</label>
                        <input type="number" class="form-control" id="bookPrice" asp-for="VM.Price" required>
                    </div>
                    <div class="form-group">
                        <label for="authorSelect">Author</label>
                        <select class="form-control" id="authorSelect" asp-for="VM.Authors" multiple required>
                            <option value="">-- Select an Author --</option>
                            @if (Model.Author != null && Model.Author.Count > 0)
                            {
                                @foreach (var author in Model.Author)
                                {
                                    <option value="@author.Id">@author.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div>
                        <dl>
                            <dt>
                                <label asp-for="VM.FormFiles"></label>
                            </dt>
                            <dd>
                                <input asp-for="VM.FormFiles" type="file"/>
                                <span asp-validation-for="VM.FormFiles"></span>
                            </dd>
                        </dl>
                    </div>
                    <button type="submit" id="saveButton" class="btn btn-primary">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>
  
<!-- Edit Book Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Book</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editBookForm" method="post">
                    <input type="hidden" id="editBookId">
                    <div class="mb-3">
                        <label for="editBookName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="editBookName" asp-for="VM.Name" required>
                    </div>
                    <div class="mb-3">
                        <label for="editBookDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="editBookDescription" rows="3" asp-for="VM.Description"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="editBookCategory" class="form-label">Category</label>
                        <input type="text" class="form-control" id="editBookCategory" asp-for="VM.Category" required>
                    </div>
                    <div class="mb-3">
                        <label for="editBookPrice" class="form-label">Price</label>
                        <input type="number" class="form-control" id="editBookPrice" step="1" asp-for="VM.Price" required>
                    </div>
                    <div class="form-group">
                        <label for="editBookAuthors">Author</label>
                        <select class="form-control" id="editBookAuthors" asp-for="VM.Authors" multiple required>
                            <option value="">-- Select an Author --</option>
                            @if (Model.Author != null && Model.Author.Count > 0)
                            {
                                @foreach (var author in Model.Author)
                                {
                                    <option value="@author.Id">@author.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    // Add New Book
    $(document).ready(function () {
        $('#bookForm').on('submit', function (event) {
            event.preventDefault(); // Prevent default form submission
            console.log('Form submitted');
            //var formData = $(this).serialize();
                    // Create a FormData object
            var formData = new FormData(this);
            
            $.ajax({
                url: '@Url.Page("Index")',
                type: 'POST',
                data: formData, 
                processData: false, // Do not process data as a query string
                contentType: false, // Let the browser set the correct Content-Type
                headers: {
                    RequestVerificationToken:
                        document.getElementById("RequestVerificationToken").value
                },
                success: function (response) {
                    console.log('Form submitted successfully returned response');
                    console.log(response);
                    if (response.success) {

                        alert(response.message || "Book created successfully!");
                        $('#createModal').modal('hide'); // Hide the modal
                        $('.modal-backdrop').remove(); // Remove black opacity blur

                            if (response.data) {
                                console.log('Form submitted successfully if response.data ');
        var bookId = response.data.result.id;
        //show data by consle log  result
        // Create a new row
        var updatedRow = $('<tr data-id="' + bookId + '">');
       
        updatedRow.append('<td class="book-name">' + response.data.result.name + '</td>');
        updatedRow.append('<td class="book-description">' + response.data.result.description + '</td>');
        updatedRow.append('<td class="book-category">' + response.data.result.category + '</td>');
        updatedRow.append('<td class="book-price">' + response.data.result.price + '</td>');

        var authorsNames = Array.isArray(response.data.result.authors)
            ? response.data.result.authors.map(author => author.name || '').join(', ')
            : 'No authors';

        updatedRow.append('<td class="book-authors">' + authorsNames + '</td>');

        updatedRow.append('<td>' +
            '<button class="btn btn-sm btn-warning btn-edit" data-bs-toggle="modal" data-bs-target="#editModal">Edit</button>' +
            '<button class="btn btn-sm btn-danger btn-delete">Delete</button>' +
            '</td>');

        // Replace the old row
        var oldRow = $('#bookTable').find('tr[data-id="' + bookId + '"]');
        if (oldRow.length) {
            oldRow.replaceWith(updatedRow);
        } else {
            // If no row exists, append it (optional fallback)
            $('#bookTable').append(updatedRow);
        }
    }
                $('#bookForm')[0].reset();
                    } else {
                        alert(response.message || "An error occurred while creating the book.");
                    }
                },
                error: function (xhr) {
                    console.log('Form failed submitting returned an error occured');
                    alert("An error occurred: " + xhr.responseText);
                }
            }
            );
        
    });

        // Load data into the Edit Modal
        
        $('#bookTable').on('click', '.btn-edit', function () {
            const row = $(this).closest('tr');
            const id = row.data('id');
            $('#editBookId').val(id); // Hidden field to store book ID
            $('#editBookName').val(row.find('.book-name').text().trim());
            $('#editBookDescription').val(row.find('.book-description').text().trim());
            $('#editBookCategory').val(row.find('.book-category').text().trim());
            $('#editBookPrice').val(row.find('.book-price').text().trim());
            //Add selected authors
            // Handle authors selection
            const authorsText = row.find('.book-authors').text().trim();

            // Split by comma to get the list of author names
            const authorNames = authorsText.split(',').map(name => name.trim());

            // Clear all previous selections in the dropdown
            $('#editBookAuthors option').prop('selected', false);

            // Match each author name with the options in the dropdown
            $('#editBookAuthors option').each(function () {
                const optionText = $(this).text().trim();
                if (authorNames.includes(optionText)) {
                    $(this).prop('selected', true);
                }
            });

            // Trigger a change event to ensure any associated scripts or behaviors respond
            $('#editBookAuthors').trigger('change');
        });

        // Submit the Edit Modal Form
        $('#editBookForm').on('submit', function (event) {
            event.preventDefault();
            const bookId = $('#editBookId').val();

            var formData = $(this).serialize();

            $.ajax({
                url: '?handler=Edit&id=' + bookId,
                type: 'POST',
                data: formData,
                headers: {
                    RequestVerificationToken:
                        document.getElementById("RequestVerificationToken").value
                },
                success: function (response) {
                    console.log(response.data);
                    debugger;
                    if (response.success) {
                        alert(response.message || "Book updated successfully!");
                        $('#editModal').modal('hide');
                        $('.modal-backdrop').remove(); // Remove black opacity blur
                        if(response.data){
                           
                            var authorsNames = Array.isArray(response.data.authors)
                            ? response.data.authors.map(author => author.name || '').join(', ')
                            : 'No authors';

                            // Replace the row
                            const row = document.querySelector(`tr[data-id="${bookId}"]`);
                            console.log(row);
                            row.querySelector('.book-name').innerHTML = response.data.name;
                            row.querySelector('.book-description').innerHTML = response.data.description;
                            row.querySelector('.book-category').innerHTML = response.data.category;
                            row.querySelector('.book-price').innerHTML = response.data.price;
                            row.querySelector('.book-authors').innerHTML = authorsNames;
                        }
                        
                    } else {
                        alert(response.message || "Failed to update the book.");
                    }
                },
                error: function (xhr) {
                    alert("Error: " + xhr.responseText);
                }
            });
            $('#editBookAuthors').trigger('change');
        });

        // Handle Delete
        $('#bookTable').on('click', '.btn-delete', function () {
            const row = $(this).closest('tr');
            const bookId = row.data('id');
            if (confirm("Are you sure you want to delete this book?")) {
                $.ajax({
                    url: '?handler=Delete&id=' + bookId,
                    type: 'POST',
                    headers: {
                        RequestVerificationToken:
                            document.getElementById("RequestVerificationToken").value
                    },
                    success: function (response) {
                        if (response.success) {
                            alert(response.message || "Book deleted successfully!");
                            row.remove();
                        } else {
                            alert(response.message || "Failed to delete the book.");
                        }
                    },
                    error: function (xhr) {
                        alert("Error: " + xhr.responseText);
                    }
                });
            }
        });
    });
</script>
